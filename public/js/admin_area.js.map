{"version":3,"sources":["config.js","init.js","common/register_module.js","home/register_module.js","template_editor/register_module.js","common/controllers/header.js","common/controllers/root.js","home/config/routes.js","home/controllers/home.js","template_editor/config/routes.js","template_editor/controllers/container_dialog.js","template_editor/controllers/input_dialog.js","template_editor/controllers/template_editor.js","template_editor/controllers/test_data.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACRA;ACAA;ACAA;AACA;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvBA;AACA;AACA;AACA;AACA;AACA;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClxpjifile":"admin_area.js","sourcesContent":["'use strict';\n\nvar ApplicationConfiguration = (function() {\n\nvar ApplicationModuleName = 'pawnengine_admin';\nvar ApplicationModuleDependencies = ['ngMaterial','ui.router','ngMessages'];\n\nvar registerModule = function(moduleName, moduleDependencies) {\n\n  angular.module(moduleName, moduleDependencies || []);\n\n  angular.module(ApplicationModuleName).requires.push(moduleName);\n} \n\n\n  return { \n\n    applicationModuleName : ApplicationModuleName,\n    applicationModuleDependencies : ApplicationModuleDependencies,\n    registerModule : registerModule\n  };\n\n\n})();\n\n \n\n \n","'use strict';\n\nangular.module(ApplicationConfiguration.applicationModuleName, ApplicationConfiguration.applicationModuleDependencies);\n\nangular.element(document).ready(function() {\n\n\tangular.bootstrap(document, [ApplicationConfiguration.applicationModuleName]);\n\n});","ApplicationConfiguration.registerModule('header');","ApplicationConfiguration.registerModule('home');","ApplicationConfiguration.registerModule('template_editor');\n","'use strict';\n\nangular.module('header').controller('headerController',['$scope','$http', function($scope, $http) {\n\nvar vm = this;\n\n}]);\n","'use strict';\n\nangular.module('pawnengine_admin').controller('rootController',['$scope','$http','$mdDialog', function($scope, $http, $mdDialog) {\n\nvar vm = this;\n\n  $scope.showConfirm = function(ev, title) {\n    // Appending dialog to document.body to cover sidenav in docs app\n    var confirm = $mdDialog.confirm()\n          .title(title)\n          .ariaLabel('Delete Input')\n          .targetEvent(ev)\n          .ok('OK')\n          .cancel('Cancel');\n\n    return $mdDialog.show(confirm);\n\n}\n\n\n\n}])\n\n.directive('validateregex', function() {\n  return {\n    require: 'ngModel',\n    link: function(scope, elm, attrs, ctrl) {\n      ctrl.$validators.validateregex = function(modelValue, viewValue) {\n        if (ctrl.$isEmpty(modelValue)) {\n          // consider empty models to be valid\n          return true;\n        }\n\n        if (viewValue) {\n          \n                var isValid = true;\n                \n\t\t\t\ttry {\n\t\t\t\t    new RegExp(viewValue);\n\t\t\t\t} catch(e) {\n\t\t\t\t    isValid = false;\n\t\t\t\t}\n\n\t\t\t\treturn isValid;          \n        }\n\n        // it is invalid\n        return false;\n      };\n    }\n  };\n});\n","angular.module('home').config(function($stateProvider, $urlRouterProvider, $httpProvider) {\n\n \n  // For any unmatched url, redirect to /state1\n  $urlRouterProvider.otherwise(\"/\");\n  //\n  $stateProvider\n\n  .state('root', {\n  \turl: \"/\",\n  \tviews: {\n  \t\t'root': {templateUrl: \"/admin/primary.view.html\" },\n  \t\t'header@root': { templateUrl: \"/admin/header.view.html\" },\n  \t\t'content@root': { templateUrl: \"/admin/home.view.html\" }\n  \t},\n  \tparams: {\n  \t\theaderTitle: 'Overview'\n  \t},\n\t      // controller: 'rootCtrl'\n\n\t  })\n\n});\n","'use strict';\n\nangular.module('home').controller('homeController',['$scope','$http', function($scope, $http) {\n\n\n}]);","angular.module('template_editor').config(function($stateProvider, $urlRouterProvider, $httpProvider) {\n\n \n  $stateProvider\n\n  .state('root.template_editor', {\n  \turl: \"template_editor/:tid\",\n  \tviews: {\n  \t\t'content@root': { templateUrl: \"/admin/template_editor.view.html\" }\n  \t},\n  \tparams: {\n  \t\theaderTitle: 'Template Editor'\n  \t}\n\t      // controller: 'rootCtrl'\n\n\t  })\n\n});\n","\n\n\tfunction containerDialogController($scope, $mdDialog, container, section, active_section, $q) { \n\n\t\t$scope.container = container;\n\n\t\t$scope.cancel = function() {\n\t\t\t$mdDialog.cancel();\n\t\t};\n\n\n\t\t$scope.initTemplate = function() {\n\n\t\t\tif(container && !$scope.con_temp) {\n\n\t\t\t\t$scope.max_position = section.containers.length;\n\t\t\t\t$scope.con_temp  = angular.copy(container);\n\t\t\t\t$scope.isUpdate = true;\n\n\t\t\t} else if(!$scope.con_temp) {\n\n\t\t\t\tvar position = section.containers.length + 1;\n\t\t\t\t$scope.max_position = position;\n\t\t\t\t$scope.total_containers = $scope.total_containers + 1;\n\n\t\t\t\t$scope.con_temp = { \n\t\t\t\t\ttitle: 'New Container' ,\n\t\t\t\t\tposition: position,\n\t\t\t\t\tconditions: {target_input_conditions:[], input_check_rule: null }\n\n\t\t\t\t};\n\n\t\t\t}\n\t\t}\n\n\n\t\t$scope.initTemplate();\n\n\n\t\tvar callBackFunc = function callBackFunc(someobj) {\n\n\t\t\tconsole.log('running' + someobj);\n\t\t}\n\n\n\n//container general controls\n\t\t$scope.changePosition = function(con_temp) {\n\n\t\t\t$scope.conflict_message = undefined;\n\n\t\t\tif(con_temp && con_temp.position <= section.containers.length  && con_temp.position >= 1) {\n\n\t\t\t   var newindex = con_temp.position - 1;\n\n\t\t\t\t//start of condition check logic for container above and under the container changing positions\n\n\t\t\t\t//check if conditions on container under with bigger position value reference the container being moved\n\t\t\t\tif(con_temp.position > container.position) {\n\n\t\t\t\t\tvar con_under = section.containers[newindex];\n\t\t\t\t\tif(con_under.conditions) {\n\n\t\t\t\t\t\tvar target_input_conditions = con_under.conditions.target_input_conditions;\n\n\t\t\t\t\t\tfor(var i = 0; i < target_input_conditions.length; i++) {\n\n\t\t\t\t\t\t\tif(target_input_conditions[i].container_id == container.id ) {\n\n\t\t\t\t\t\t\t\t$scope.conflict_message = 'This container is referenced by conditions on the container below';\n\t\t\t\t\t\t\t\tcon_temp.position = container.position;\n\t\t\t\t\t\t\t\tsetTimeout(function() { $scope.conflict_message = null; $scope.$apply(); }, 5000);\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t//check container above, with smaller position value against conditions on container being moved.\n\t\t\t\t} else if (container.conditions) {\n\n\t\t\t\t\tvar con_above = section.containers[newindex];\n\n\t\t\t\t\tvar target_input_conditions = container.conditions.target_input_conditions;\n\n\t\t\t\t\t for(var i = 0; i < target_input_conditions.length; i++) {\n\n\t\t\t\t\t\t\tif(target_input_conditions[i].container_id == con_above.id ) {\n\n\t\t\t\t\t\t\t\t$scope.conflict_message = 'The conditions on this container reference the container above';\n\t\t\t\t\t\t\t\tcon_temp.position = container.position;\n\t\t\t\t\t\t\t\tsetTimeout(function() { $scope.conflict_message = null; $scope.$apply(); }, 5000);\n\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\n\t\t\t\t}\n\t\t\t\t//End of condition check\n\n\n\t\t\t\tsection.containers.splice((container.position - 1), 1);\n\t\t\t\tsection.containers.splice(newindex, 0, container);\n\t\t\t\tvm.update_position_fields(section.containers);\n\n\n\t\t\t}\n\t\t\t\tcon_temp.position = container.position;\n\n\t\t\t\tcallBackFunc();\n\n\t\t}\n\n\n\n\n\n\t\t// $scope.selected_check = function (obj, prop_name, model_name) {\n\n\t\t//   if($scope.current_state == 'edit') {\n\n\t\t// \t if(obj.id == $scope.temp_cond[prop_name]) {\n\n\t\t// \t\t\t\t\t$scope[model_name] = obj;\n\t\t// \t\t}\n\t\t// \t }\n\t\t// }\n\n\n\t\t$scope.clear_edit_objects = function() {\n\n\t\t\t$scope.temp_cond = undefined;\n\t\t\t$scope.current_state = null;\n\t\t}\n\n\n\n\t\t$scope.getValidSections = function getValidSections() {\n\n\t\t\tvar valid_sections = template.sections.filter(function(itm, idx) {\n\n\t\t\t\tif(itm.count <= active_section) { \n\n\t\t\t\t\tif($scope.current_state == 'edit' && !$scope.selected_section) {\n\n\t\t\t\t\t\tif(itm.id == $scope.temp_cond.section_id) {\n\n\t\t\t\t\t\t\t$scope.selected_section = itm;\n\t\t\t\t\t\t}\n\t\t\t\t\t} \n\n\t\t\t\t\treturn true; \n\n\t\t\t\t}\n\n\t\t\t});\n\n\t\t\t$scope.valid_sections = valid_sections;\n\t\t}\n\n\n\t\n\n\n\t    $scope.getValidContainers = function getValidContainers(selected_section) {\n\n\t        if(!$scope.selected_section) $scope.selected_section = selected_section;\n\n\t    \tif(!$scope.selected_section) return;\n\n\t\t\tvar valid_containers = $scope.selected_section.containers.filter(function(itm, idx) {\n\n\t\t\t\tif($scope.selected_section.count < active_section ||  itm.position < $scope.con_temp.position) { \n\n\t \n\t\t\t\t\t   if($scope.current_state == 'edit' && !$scope.selected_container) {\n\n\t\t\t\t\t\t\tif(itm.id == $scope.temp_cond.container_id) {\n\n\t\t\t\t\t\t\t\t$scope.selected_container = itm;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} \n\n\n\t\t\t\t\t\treturn true; \n\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\n\t\t\t);\n\n\t\t\t$scope.valid_containers = valid_containers;\n\t\t}\n\n\n\n\n\t\t$scope.getValidInputs = function getValidInputs() {\n\n\t    \tif(!$scope.selected_container) return;\n\n\t\t\tvar valid_inputs = $scope.selected_container.inputs;\n\n\t\tif($scope.current_state == 'edit' && !$scope.selected_input) {\n\n\t\t\tvalid_inputs.filter(function(itm, idx) {\n\n\n\t\t\t\tif(itm.id == $scope.temp_cond.input_id) {\n\n\t\t\t\t\t$scope.selected_input = itm;\n\t\t\t\t}\n\t\t\t\t\t\n\n\t\t\t});\n\t\t}\n\n\t\t\t$scope.valid_inputs = valid_inputs;\n\t\t}\n\n\n\t\tfunction init_dropdown_lists() {\n\n\t\t\t$scope.getValidSections();\n\t\t\t$scope.getValidContainers();\n\t\t\t$scope.getValidInputs();\n\n\t\t}\n\n\n\t\t$scope.edit_condition = function(condition) {\n\n\t\t\t\t$scope.current_state = 'edit';\n\t\t\t\t$scope.temp_cond = condition;\n\t\t\t\tinit_dropdown_lists();\n\n\t\t}\n\n\n\t\t$scope.new_condition = function() {\n\n\t\t\t$scope.temp_cond = {};\n\t\t\t// init_dropdown_lists();\n\t\t\t$scope.getValidSections();\n\t\t}\n\n\n\n\t\t$scope.setRule = function(rule) {\n\n\t\t\t$scope.temp_cond.input_value_check_rule = rule;\n\t\t}\n\n\n\t    $scope.setTestValue = function(value, checked_value) {\n\n\t    \tif(!checked_value) {\n\n\t    \t\tchecked_value = null; \n\t    \t\t$scope.temp_cond.test_value = null;\n\t    \t\treturn;\n\t    \t}\n\n\t\t\t$scope.temp.condition.test_value = value;\n\t\t}\n\n\n\t\t$scope.allowNotInArrayCheckBoxState = function() {\n\n\t\t\tif($scope.temp_cond.test_array && $scope.temp_cond.test_array.length > 0 && $scope.temp_cond.test_array.length < $scope.selected_input.options.length) {\n\n\t\t\t\treturn false;\n\t\t\t} else {\n\n\t\t\t\t$scope.temp_cond.allow_notinarray = null;\n\t\t\t\treturn true;\n\t\t\t}\n\n\n\t\t}\n\n\t\t$scope.setAllowNotInArrayCheckbox = function() {\n\n\t\t\tif(!$scope.notInArrayCheckboxIsSet && $scope.temp_cond.allow_notinarray === null ) {\n\n\t\t\t   $scope.notInArrayCheckboxIsSet = true;\n\t\t\t   $scope.temp_cond.allow_notinarray = true;\n\n\t\t\t}\n\n\t\t}\n\n\n\n\t\t$scope.addCondition = function(con) {\n\n\t\t\tvar conditions = $scope.con_temp.conditions.target_input_conditions;\n\n\t\t\tvar existing_idx;\n\t\t\tvar existing_con = conditions.find(function(c, idx){\n\n\t\t\t    existing_idx = idx;\n\t\t\t\treturn c.input_id == con.input_id;\n\n\t\t\t});\n\n\t\t\tif(existing_con) {\n\n\t\t\t\tconditions[existing_idx] = con;\n\t\t\t}\n\n\t\t\telse {\n\n\t\t\t\tconditions.push(con);\n\n\t\t\t}\n\t\t}\n\n\n\t\t$scope.addContainer = function() {\n\n\t\t\tif($scope.isUpdate) {\n\n\t\t\t\tvar idx = $scope.con_temp.position - 1;\n\t\t\t\tsection.containers[idx] = $scope.con_temp;\n\n\t\t\t} else {\n\n\t\t\t\t$scope.con_temp.id = UUID.generate();\n\t\t\t\t// container = $scope.con_temp;\n\t\t\t\tsection.containers.push($scope.con_temp);\n\t\t\t\t$scope.isUpdate = true;\n\t\t\t}\n\n\n\t\t}\n\n\n\n\t}\n","\tfunction addInputDialogController($scope, $mdDialog, $mdToast, container, input) {\n\n\t\t$scope.container = container;\n\n\t\t$scope.input_types = [{name:'radiogroup', dname: 'radio group'},{name:'checkbox', dname: 'Checkbox'},{name:'text', dname: 'Text'} ,{name:'select', dname: 'Select list'},{ name:'multiselect', dname: 'Muli-Select list'},{ name:'date', dname: 'Date'}];\n\n\n\t\t$scope.initTemplate = function() {\n\n\t\t\tif(input && !$scope.newinput) {\n\t\t\t\t$scope.max_position = container.inputs.length;\n\t\t\t\t$scope.newinput  = angular.copy(input);\n\t\t\t\t$scope.isUpdate = true;\n\n\t\t\t} else if(!$scope.newinput) {\n\n\t\t\t\tif(!container.inputs) container.inputs = [];\n\t\t\t\tvar position = container.inputs.length + 1;\n\t\t\t\t$scope.max_position = position;\n\t\t\t\t$scope.total_inputs = $scope.total_inputs + 1;\n\n\t\t\t\t$scope.newinput = { \n\t\t\t\t\ttype: 'checkbox' ,\n\t\t\t\t\tvalue: null,\n\t\t\t\t\tposition: position\n\n\t\t\t\t};\n\n\t\t\t} else {\n\n\t\t\t\t$scope.newinput.value = null;\n\n\t\t\t}\n\n\n\n\n\n\t\t\t//upon input type change if non array value exists, it's pushed into an array. \n\t\t\tif($scope.newinput.type == 'multiselect') {\n\n\t\t\t\tvar copy;\n\n\t\t\t\t$scope.temp = {};\n\n\t\t\t\tif($scope.newinput.value && !Array.isArray($scope.newinput.value)) {\n\n\t\t\t\t\tcopy = angular.copy($scope.newinput.value);\n\t\t\t\t}\n\n\t\t\t\tif(!$scope.newinput.value || !Array.isArray($scope.newinput.value)) $scope.newinput.value = [];\n\n\n\t\t\t\tif(copy) { $scope.newinput.value = $scope.newinput.value.push(copy); }\n\n\n\t\t\t}\n\n\n\n\t\t\t$scope.active_option =  {};\t\t  \t          \n\t\t\t$scope.newinput.options = $scope.newinput.options ? $scope.newinput.options : [];\n\n\t\t\t$scope.get_max_option_position = function get_max_option_position() {\n\n\t\t\t   return $scope.newinput.options.length;\n\n\t\t\t}\n\n\t\t}\n\n\n\t\t$scope.initTemplate();\n\n\n\t\t$scope.cancel = function() {\n\t\t\t$mdDialog.cancel();\n\t\t};\n\n\n\t\t$scope.addInput = function(ev, newinput, update) {\n\n\n\t\t\t$scope.input_form.$setSubmitted();\n\n\t\t\tif($scope.input_form.$valid && $scope.constraints.$valid && $scope.option_form.$valid) {\n\n\t\t\t\tvar input_type = $scope.newinput.type;\n\t\t\t\tvar inputs_with_options = ['select','multiselect','radiogroup'];\n\n\n\t\t\t\t    \t    // if(input_type == 'select') {\n\n\t\t\t\t    \t    // \tif(!selected_value) { $scope.newinput.value == null; }\n\t\t\t\t    \t    // \telse {\n\n\t\t\t\t    \t    // \t\tnewinput.value = selected_value;\n\t\t\t\t    \t    // \t}\n\t\t\t\t    \t    // }\n\n\n\t\t\t\t    \t    if(newinput.attributes && newinput.attributes['pattern']) { \n\n\n\t\t\t\t    \t    \t// newinput.pattern = new RegExp(escapeStringRegExp(newinput.pattern.toString())); \n\n\t\t\t\t    \t    \tvar inputstring = newinput.attributes['pattern'].toString();\n\t\t\t\t    \t    \tvar flags = inputstring.replace(/.*\\/([gimy]*)$/, '$1');\n\t\t\t\t    \t    \tvar pattern = inputstring.replace(new RegExp('^/(.*?)/'+flags+'$'), '$1');\n\t\t\t\t    \t    \tvar regex = new RegExp(pattern, flags);\n\n\t\t\t\t    \t    \tnewinput.attributes['pattern'] = regex;\n\n\t\t\t\t    \t    }\n\n\n\t\t\t\t    \t    if(!inputs_with_options.includes(input_type)) {\n\n\t\t\t\t    \t    \tdelete newinput.options;\n\t\t\t\t    \t    }\n\n\n\t\t\t\t    \t    if(!update) {\n\n\t\t\t\t    \t    \tvar index = newinput.position ? (newinput.position - 1) : container.inputs.length;\n\t\t\t\t    \t    \tnewinput.id = UUID.generate();\n\t\t\t\t    \t    \tcontainer.inputs.splice(index, 0 , newinput);\n\t\t\t\t    \t    \t$scope.newinput = { type: input_type };\n\t\t\t\t    \t    \t$scope.input_form.$setPristine(true);\n\t\t\t\t    \t    \t$scope.input_form.$setUntouched(true);\n\n\n\t\t\t\t    \t    } else if(update) {\n\n\t\t\t\t    \t    \tangular.copy($scope.newinput, input);\n\n\t\t\t\t    \t    }\n\n\t\t\t\t    \t    $scope.newinput.options = [];\n\n\n\t\t\t\t    \t} else {\n\n\t\t\t\t    \t\t\t$mdToast.showSimple('Validation Error');\n\t\t\t\t    \t}\n\n\n\n\t\t\t\t    }\n\n\n\t\t\t\t    $scope.changePosition = function(newinput) {\n\n\n\t\t\t\t    \tvar position = newinput.position - 1;\n\n\t\t\t\t    \tif(input && position <= container.inputs.length) {\n\n\t\t\t\t    \t\tcontainer.inputs.splice((input.position - 1), 1);\n\t\t\t\t    \t\tcontainer.inputs.splice(position, 0, input);\n\t\t\t\t    \t\tinput.position = (position + 1);\n\t\t\t\t    \t}\n\t\t\t\t    }\n\n\n\n\n\t\t    //option functions\n\t\t    $scope.addOption = function() {\n\n\t\t    \tif($scope.option_form.option_text.$invalid) return;\n\n\t\t    \tvar copy = angular.copy($scope.active_option);\n\n\t\t    \tcopy.uid = UUID.generate();\n\t\t    \tdelete copy['$$mdSelectId'];\n\t\t    \tdelete copy['id'];\n\n\n\n\t\t    \t$scope.newinput.options.push(copy);\n\t\t    \t$scope.active_option = {};\n\t\t    \t$scope.selectedOption = {};\n\n\t\t    \tif($scope.newinput.type == 'select') {\n\n\t\t    \t\t$scope.newinput.value = copy.uid;\n\n\t\t    \t}\n\n\t\t    \telse if($scope.newinput.type == 'multiselect') {\n\n\t\t    \t\t$scope.temp.current_value = copy;\n\n\t\t    \t}\n\n\n\n\t\t    \t$scope.setOption(copy);\n\t\t    }\n\n\n\t\t    //for select list to display mark or style for select option\n\t\t    $scope.checkIfSelected = function(opt) {\n\t\t    \tif(!opt) return false;\n\n\t\t    \tvar query = opt.uid || opt.id;\n\t\t    \treturn $scope.newinput.value.includes(query);\n\t\t    }\n\n\t\t    //toggle checkbox and remove or add value in value array\n\t\t    $scope.toggleSelected = function(optionSelected) {\n\n\n\t\t    \tvar value = $scope.selectedOption.uid || $scope.selectedOption.id;\n\n\n\t\t    \tif(optionSelected) {\n\n\t\t    \t\t$scope.newinput.value.push(value);\n\t\t    \t// $scope.optionSelected = true;\n\n\t\t    }\telse {\n\n\t\t    \t$scope.newinput.value = $scope.newinput.value.filter(function(itm, idx) {\n\n\t\t    \t\treturn itm !== value; \n\n\t\t    \t});\n\n\n\t\t    \t  // $scope.optionSelected = false;\n\n\n\t\t    \t}\n\n\t\t    // \tif(!$scope.active_option.selected) {\n\n\t\t    // \t$scope.newinput.value.push($scope.selectedOption.value); \n\n\t\t    // \t} else {\n\n\t\t    // \t$scope.newinput.value = $scope.newinput.value.filter(function(itm, idx) {\n\n\t\t    // \t\treturn itm !== $scope.current_value; \n\n\t\t    // \t});\n\n\n\t\t    // }\n\t\t}\n\n\n\n\t\t$scope.setOption = function(op) {\n\n\t\t\tif(!op) return;\n\n\t\t    vm.update_position_fields($scope.newinput.options);\n\t\t\tvar query = op.uid || op.id;\n\t\t\tvar option = $scope.newinput.options.find(function(opt) {\n\t\t\t\tvar id = opt.uid || opt.id;\n\t\t\t\treturn id == query;\n\t\t\t});\n\n\t\t\t$scope.active_option = angular.copy(option);\n\t\t\t$scope.selectedOption = option;\n\t\t\tif($scope.temp && $scope.temp.current_value) $scope.temp.current_value = option;\n\t\t}\n\n\n\n\n\n\n\t\t$scope.updateOption = function() {\n\n\t\t\tif($scope.option_form.option_text.$invalid) return;\n\n\t\t\tif($scope.selectedOption) {\n\n\n\t\t\t\tangular.copy($scope.active_option, $scope.selectedOption );\n\n\t\t\t}\n\t\t}\n\n\n\n\t\t$scope.deleteOption = function() {\n\n\t\t\tvar opt_id = $scope.selectedOption.id;\n\t\t\tvar opt_pos = $scope.selectedOption.position;\n\n\t\t\tvar index = $scope.selectedOption.position - 1;\n\t\t\t$scope.newinput.options.splice(index, 1 );\n\t\t\t$scope.selectedOption = undefined;\n\t\t\tif(!Array.isArray($scope.newinput.value)) {\n\n\t\t\t \t$scope.newinput.value = null;\n\n\n\t\t\t} else {\n\n\t\t\t\t$scope.newinput.value = $scope.newinput.value.filter(function(id, idx) {\n\n\t\t\t\t\treturn id != opt_id;\n\n\t\t\t\t});\n\n\t\t\t\t// $scope.temp.current_value = null;\n\n\t\t\t\t//after delete set the next option after the deleted one, if deleted was last option, set the first.\n\t\t\t\tif($scope.newinput.options.length >= opt_pos) {\n\n\t\t\t\t\t$scope.setOption($scope.newinput.options[(opt_pos - 1)]);\n\n\n\t\t\t\t\t// $scope.temp.current_value = $scope.newinput.options[(opt_pos - 1)];\n\n\t\t\t\t} else if ($scope.newinput.options.length > 0 ) {\n\n\t\t\t\t\t// $scope.temp.current_value = $scope.newinput.options[0];\n\n\t\t\t\t\t$scope.setOption($scope.newinput.options[0]);\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\n\n\t\t$scope.changeOptionPosition = function(active_option) {\n\n\n\t\t\tvar index = $scope.selectedOption.position - 1;\n\t\t\tvar new_index = active_option.position - 1;\n\n\n\t\t\tif(new_index <= ($scope.newinput.options.length - 1)) {\n\n\t\t\t\t$scope.newinput.options.splice(index, 1);\n\t\t\t\t$scope.newinput.options.splice(new_index, 0, $scope.selectedOption);\n\t\t\t\t$scope.selectedOption.position = (new_index + 1)\t\t    \t\n\t\t\t}\n\t\t}\n\n\n\n\n\n\n\t\t    //condition creation functions\n\n\t\t    $scope.getPreceding = function(position) {\n\n\t\t    \tif(position > 1) {\n\n\t\t    \t\tvar preceding_inputs = container.inputs.filter(function(item, idx) {\n\t\t    \t\t\treturn item.position < position;\n\t\t    \t\t});\n\n\n\t\t    \t\treturn preceding_inputs;\n\n\t\t    \t}\n\t\t    }\n\n\n\n\t\t}","'use strict';\n\nvar UUID = (function() {\n\tvar self = {};\n\tvar lut = []; for (var i=0; i<256; i++) { lut[i] = (i<16?'0':'')+(i).toString(16); }\n\tself.generate = function() {\n\n\t\tvar d0 = Math.random()*0xffffffff|0;\n\n\t\treturn lut[d0&0xff]+lut[d0>>8&0xff]+lut[d0>>16&0xff]+lut[d0>>24&0xff];\n\t}\n\n\treturn self;\n\n})();\n\n\n\n\n\nangular.module('template_editor').controller('templateEditorController',['$scope','$http','$state', '$mdDialog', function($scope, $http, $state, $mdDialog) {\n\n\n\n\tvar vm = this;\n\n\tvm.template = template;\n\n\tvar tid = $state.params.tid;\n\tvar section_no = $state.params.section_no;\n\t$scope.inputs = [];\n\n\tvm.active_section = parseInt(section_no ? section_no : 1);\n\n\tvm.sectionActive = function(count) {\n\n\t\treturn count == vm.active_section;\n\t}\n\n\n\n\tvm.showTipDialog = function(ev,tip) {\n\n\t\t$mdDialog.show({\n\t\t\tcontroller: tipDialogController,\n\t\t\ttemplateUrl: 'mainapp/tipdialog.tmp.html',\n\t\t\tparent: angular.element(document.body),\n\t\t\ttargetEvent: ev,\n\t\t\tlocals: {tip:tip},\n\t\t\tclickOutsideToClose:true,\n      fullscreen: false // Only for -xs, -sm breakpoints.\n  });\n\n\n\t}\n\n\n\tvm.addEditInput = function(ev, cc, input) {\n\n\t\t$mdDialog.show({\n\t\t\tcontroller: addInputDialogController,\n\t\t\ttemplateUrl: 'admin/add_input.tmp.html',\n\t\t\tparent: angular.element(document.body),\n\t\t\ttargetEvent: ev,\n\t\t\tlocals: {container:cc, input: input},\n\t\t\tclickOutsideToClose:true,\n      fullscreen: false // Only for -xs, -sm breakpoints.\n  });\n\t}\n\n\n\n\tvm.addEditContainer = function(ev, con, section) {\n\n\t\t$mdDialog.show({\n\t\t\tcontroller: containerDialogController,\n\t\t\ttemplateUrl: 'admin/add_edit_container.tmp.html',\n\t\t\tparent: angular.element(document.body),\n\t\t\ttargetEvent: ev,\n\t\t\tlocals: {container: con, section: section, active_section: vm.active_section},\n\t\t\tclickOutsideToClose:true,\n      fullscreen: false // Only for -xs, -sm breakpoints.\n  });\n\t}\n\n\n\n\tvm.delInput = function($event, cc, $index) {\n\n\t\tvar promise = $scope.showConfirm($event, 'Delete this input ?');\n\n\t\tpromise.then(function() {\n\n\t\t\tcc.inputs.splice($index,1);\n\n\n\t\t}, function() {});\n\n\t}\n\n\n\tvm.del_container = function($event, $index, section) {\n\n\t\tvar promise = $scope.showConfirm($event, 'Delete this container and its contents ?');\n\n\t\tpromise.then(function() {\n\n\t\t\tsection.containers.splice($index,1);\n\n\n\t\t}, function() {});\n\n\t}\n\n\n\n\n\n\n\tvm.checkEquality = checkEquality;\n\tvm.register_conditions = register_conditions;\n\n\n\t$scope.nextSection = function() {\n\n\t\tvar isValid = true;\n\t\tvar inputs = $scope.inputs;\n\n\t\tfor(var i = 0; i < inputs.length; i++) {\n\n\t\t\tvar input = vm.tForm[inputs[i]];\n\n\t\t\tif(input.$invalid && !input.$inputDisabled) {\n\n\t\t\t\tinput.$setTouched();\n\t\t\t\tisValid = false;\n\n\t\t\t}\n\t\t}\n\n\t\tif(isValid) vm.active_section++;\n\n\t\tconsole.log(vm.tForm.$valid);\n\n\t}\n\n\n\t$scope.prevSection = function() {\n\n\n\t\tvm.active_section--;\n\t\tconsole.log(vm.tForm.$valid);\n\n\t}\n\n\tvm.createDateObject = function(inp) {\n\n\t\tif(!inp.value) { inp.value = new Date(); }\n\t\telse { inp.value = new Date(inp.value); }\n\n\t\tif(inp.attributes['minDate']) inp.attributes['minDate'] = new Date(inp.attributes['minDate']);\n\t    if(inp.attributes['maxDate']) inp.attributes['maxDate'] = new Date(inp.attributes['maxDate']);\n\n\t    return;\n\t}\n\n\t\n\n\n\n\tvm.returnPattern = function(pattern) {\n\n\n\t}\n\n\n\n// function getPositionString(ploc) {\n\n// \t\t\treturn ploc + '-' + $index;\n// \t\t}\n\nvm.set_con_pos = function(con, $index, section, $sindex ) {\n\n\tvar form = vm.tForm;\n\tvar ploc = '';\n\n\n\tif(section && !section.count) { ploc = form['condata_'+pcon.id].position; }\n\n\tform['condata_'+con.id] = {\n\n\t\tposition:  (function() { return ploc ? ( ploc + $index + '-') : ($sindex + '-' + $index + '-' ); })(),\n\n\t}\n\n}\n\n\n\n\n\n\n\nvm.condition_register = [];\n//this register will be used to reference the condition object and accessed through object keys. When a container or input with dependant conditions is deleted,\n//the dependant condition(s) registered for this container/input will be deleted. \n\nfunction register_conditions(con, secid) {\n\n\t\n\tvar conditions = con.conditions.target_input_conditions;\n\n\tfor(var i = 0; i < conditions.length; i++) {\n\n\t\t//register the target container, target input and dependant container and input\n\t\t//format target_section | target_container | target_input | dependant_section | dependant_container \n\t\tvar tc_id = conditions[i].container_id;\n\t\tvar ti_id = conditions[i].input_id;\n\t\tvar ts_id = conditions[i].section_id;\n\n\t\tvar dc_id = con.id;\n\t\tvar ds_id = secid;\n\n\n\n\t\t\tif(!vm.condition_register[ts_id]) vm.condition_register[ts_id] = {};\n\t\t\tif(!vm.condition_register[ts_id][tc_id]) vm.condition_register[ts_id][tc_id] = {};\n\t\t    if(!vm.condition_register[ts_id][tc_id][ti_id]) vm.condition_register[ts_id][tc_id][ti_id] = {};\n\t\t    if(!vm.condition_register[ts_id][tc_id][ti_id][ds_id]) vm.condition_register[ts_id][tc_id][ti_id][ds_id] = {};\n\t\t    if(!vm.condition_register[ts_id][tc_id][ti_id][ds_id][dc_id]) {\n\n\t\t    \tvm.condition_register[ts_id][tc_id][ti_id][ds_id][dc_id] = {};\n\t\t    \tvm.condition_register[ts_id][tc_id][ti_id][ds_id][dc_id]['con'] = conditions[i];\n\t\t    };\n\n\n\n\n\t\t\n\n\t}\n\n}\n\n\n\n\n\n\n\nfunction checkEquality(cc) {\n\n\t//cc - current container\n\t//co - conditin object\n\n\tif(!cc || !cc.conditions || cc.conditions.target_input_conditions.length === 0) return true;\n\n\tvar coArr = cc.conditions.target_input_conditions;\n\tvar inputRules = cc.conditions.input_check_rule;\n\tvar cIdentifier = 'container_'+cc.id+'_show';\n\tvar displayContainer = checkContainerConditions(coArr,cc,inputRules);\n\n\t\t//return if whether container should be visible\n\t\tif(displayContainer) {\n\n\t\t\tvm.tForm[cIdentifier] = true;\n\n\t\t\t//show ?\n\t\t\treturn true;\n\t\t}\n\t\telse {\n\n\t\t\tvm.tForm[cIdentifier] = displayContainer;\n\t\t\t//show ?\n\t\t\treturn displayContainer;\n\t\t}\n\n\n\t}\n\n\tfunction checkContainerConditions(coArr,cc,inputRules) {\n\n\n\t\tvar trueCount = 0;\n\t\tvar falseCount = 0;\n\n\t\tvar displayContainer;\n\n\t\t$scope.thisIsParent = true;\n\n\t\t//check each condition object for container and evaluate expected values specified in condition against those which the 'controller input' model is set to. \n\t\t//if condition is satisfied increment trueCount, else falseCount.\n\t\tfor(var i = 0; i < coArr.length; i++) {\n\n\t\t\tvar co = coArr[i];\n\n\t\t//the 'controller / target' input (in a different container!), the state or value of which decides whether the current condition (co) is satisfied\n\t\t// co.targetInput = co.targetInput ? co.targetInput : vm.tForm[co.input_name];\n\t\tco.targetInput = vm.tForm[co.input_type +'_'+co.input_id];\n\n\t\tif(!co.targetInput) continue;\n\n\t\t//if the 'controller' input is disabled, check if its parent container is hidden. If hidden, this sets displayContainer to false, even if this condition only has 'disable' specified.\n\t\t//when \n\t\tif(co.targetInput.$inputDisabled) { \n\n\t\t\tvar cIdentifier =  'container_'+co.container_id+'_show';\n\t\t\tif(vm.tForm[cIdentifier] !== undefined && vm.tForm[cIdentifier] == false) {\n\t\t\t\t\n\t\t\t\tdisplayContainer = false;\n\t\t\t}\n\t\t\telse { displayContainer = setDisplayContainer(displayContainer, co.behavior); }\n\n\t\t\tfalseCount++; continue; \n\t\t}\n\n\t\t//check that it doesn't accept invalid values\n\t\tvar val_id_input = co.targetInput.$modelValue;\n\t\tvar check_type = co.input_value_check_rule;\n\n\n\t\tif(!val_id_input) { displayContainer = setDisplayContainer(displayContainer, co.behavior); falseCount++; continue; }\n\n\n\n\n\t\t// at least N from available input options, if at_least_n is null, than valid if single value is selected\n\t\t//if at leat N of options is selected, does not check test array\n\t    if(check_type == 'any_n' && val_id_input.length >= co.atleast_n) { trueCount++; continue; }\n\n\n\n\t    // if the condition requires checking against test array\n\t\tif(co.test_array && co.test_array.length > 1) {\n\n\t\t\tvar val_id_arr = co.test_array;\n\n\t\t\tvar match_count = 0;\n\t\t\tfor(var m = 0; m < val_id_input.length; m++) {\n\n\t\t\t\tif(val_id_arr.includes(val_id_input[m])) {\n\n\t\t\t\t\tmatch_count++;\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// at least N within test array and no input values outside of test array (if at_least value not present, must match all values in test array)\n\n\n\n                // option (allow values outside test array ticked)\n\t\t\t// at least N within test array and input values from outside test array are allowed (if at_least value not present, must match all values in test array)\n\n\n\n\n\n\t\t\t//if all valid value_id's that are present in the test array are selected, even if more are selected.\n\t\t\t// if(check_type == 'all_or_more' && match_count == val_id_arr.length) { trueCount++; continue; }\n\n\t\t\t//if any selected value_id is present in test (accepted value) array\n\t\t\tif(check_type == 'atleast_n' && match_count >= co.atleast_n) { trueCount++; continue; }\n\n\t\t\t//must contain all and only value_id's in the test array\n\t\t\tif(check_type == 'all_and_only' && ( match_count == val_id_arr.length &&  val_id_input.length == val_id_arr.length )) { \n\n\t\t\t\ttrueCount++; continue; \n\t\t\t}\n\n\t\t\tfalseCount++;\n\n\t\t\tdisplayContainer = setDisplayContainer(displayContainer, co.behavior);\n\n\n\t\t} else {\n\n\t\t\tif(co.test_value.toString().toLowerCase() == val_id_input.toString().toLowerCase()) { \n\n\t\t\t\ttrueCount++;\n\n\t\t\t} else { \n\n\t\t\t\tfalseCount++; \n\n\t\t\t\tdisplayContainer = setDisplayContainer(displayContainer, co.behavior);\n\n\t\t\t}\n\n\t\t\tcontinue;\n\t\t}\n\n\n\t};\n\n\t\t//all must be valid - any single one or at least n number - \n\t\tif(inputRules == '==' && coArr.length == trueCount) {\n\n\t\t\ttoggleInputs(cc, false);\n\t\t\tdisplayContainer = true;\n\n\t\t} else if (inputRules.indexOf('>=') == 0 && trueCount >= parseInt(inputRules.substr(2,2))) {\n\n\t\t\ttoggleInputs(cc, false);\n\t\t\tdisplayContainer = true;\n\n\t\t} else {\n\n\t\t\ttoggleInputs(cc, true);\n\t\t}\n\n\n\t\treturn displayContainer;\t     \n\n\t}\n\n\tfunction toggleInputs(cc,val) {\n\n\t\tfor(var i = 0; i < cc.inputs.length; i++) {\n\n\t\t\tvar input = cc.inputs[i];\n\t\t\tinput.disabled = val;\n\t\t\tvar input_name = input.type + '_' + input.id;\n\t\t\tif(vm.tForm[input_name]) vm.tForm[input_name].$inputDisabled = val;\n\n\t\t}\n\t}\n\n\tfunction setDisplayContainer(displayContainer, behavior) {\n\n\t\t\t\t\t//if condition not satisfied, decide whether to hide the container\n\t\t\t\t\tif(displayContainer !== false && behavior == 'disable') {\n\n\t\t\t\t\t\tdisplayContainer = true;\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tdisplayContainer = false;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn displayContainer;\n\t\t\t\t}\n\n\n\n\n\n\t\t\t\tfunction getTemplate() {\n\n\t\t\t\t\t$http.get('/templates/' + 1 ).then(\n\n\t\t\t\t\t\tfunction(res) {\n\n\t\t\t\t\t\t\tvm.template = res.data;\n\n\t\t\t\t\t\t},\n\t\t\t\t\t\tfunction() {\n\n\n\t\t\t\t\t\t});\n\t\t\t\t}\n\n\n\t// getTemplate();\n\n\n\n\tfunction tipDialogController($scope, $mdDialog, tip) {\n\n\t\t$scope.tip = tip;\n\n\t\t$scope.cancel = function() {\n\t\t\t$mdDialog.cancel();\n\t\t};\n\n\t}\n\n\n\n\tvm.initInputPosition = function(input, index) {\n\n\t\tinput.position = index + 1;\n\t\treturn input.position;\n\t}\n\n\n\n\tvm.update_position_fields = function(collection) {\n\n\t\t\tcollection.forEach(function(itm, idx) {\n\n\t\t\t\titm.position = idx + 1;\n\t\t\t});\n\t\t}\n\n\n\n\n\n\n\n\n}]);\n\n\n\n\n\n\n// .directive ('setAttrValues', function() {\n//     return {\n//         restrict: 'A',\n//         scope : {\n//           inp : '=inp'\n//         },\n//         link : function(scope, ele, attr)\t{\n\n//         \t\tif(!scope.inp || !scope.inp.attributes) return;\n//         \t\tvar attrs = scope.inp.attributes;\n          \n// \t          \tfor(var i = 0; i < attrs.length; i++) {\n\n// \t          \t\tswitch(attrs[i].name) {\n\n\n// \t          \t\t    case 'min-date':\n// \t          \t\t\tbreak;\n\n// \t          \t\t    case 'max-date':\n// \t          \t\t\tbreak;\n\n// \t          \t\t    case 'ngPattern':\n\n// \t          \t\t\t\tattr[attrs[i].name] = attrs[i].val.toString();\n\n// \t          \t\t\tbreak;\n\n// \t          \t\t}\n\n\t            \n// \t        }\n\n//         }\n// }});\n\n","\nvar template = {\n\n\tid:0,\n\ttitle:'Macbook Pro',\n\n\tsections: [\n\t{\n\t\tid:0,\n\t\ttitle: 'Section 1',\n\t\tcount: 1,\n\n\n\t\tcontainers: [\n\n\n\t\t\t//start con 1\n\t\t\t{\n\t\t\t\tid: 1,\n\t\t\t\tposition: 1,\n\t\t\t\ttitle: 'Is your item new or used ?',\n\t\t\t\tinputs:[\n\n\n\n\n\t\t\t\t{\n\t\t\t\t\tid:0, type:'radiogroup', text:'select an option', errormsg: [{required: 'this input is required'}],  group:'itemcon', title:'some title for radio', value: null, required: true, tip: { label:'Do you need help ?', heading: 'MaBook Serial location', text: 'The serial can be found on the underside of the notebook.', image:'someimage.png' },\n\t\t\t\t\toptions: [{id:0, text:'item is new', value: 0 }, {id:1, text:'item is used', value: 1}, {id:11, text:'item is broken', value: 11}, {id:12, text:'item is open', value: 12}]\n\t\t\t\t},\n\n\t\t\t\t{\n\t\t\t\t\tid:0, type:'date', errormsg: '{required:\"this input is required\"}',title:'Select puchase date', attributes: { minDate: '05/05/2017' , maxDate: '10/20/2018'}, value: null, required: true, tip: { label:'Do you need help ?', heading: 'MaBook Serial location', text: 'The serial can be found on the underside of the notebook.', image:'someimage.png' }\n\t\t\t\t},\n\n\n\n\t\t\t\t{\n\t\t\t\t\tid:1, type:'text', required: true,  group: null, value: null, placeholder:'put some text heree', attributes: { pattern : /^(\\d)+$/ }, tip: { label:'Do you need help ?', heading: 'MaBook Serial location', text: 'The serial can be found on the underside of the notebook.', image:'someimage.png' }\n\n\t\t\t\t},\n\n\t\t\t\t{\n\t\t\t\t\tid:4, type:'multiselect', title:'select many inputs',  group:'checkgrp', value: null, required: true,\n\t\t\t\t\toptions: [{id:4, text:'check op 1', value: 4 }, {id:5, text:'check op 2', value: 5},{id:6, text:'check op 3', value: 6 },{id:7, text:'check op 7 testing long text', value: 7 },{id:8, text:'check op 88888', value: 8 }]\n\t\t\t\t},\n\n\t\t\t\t{\n\t\t\t\t\tid:55, type:'checkbox', text:'old checkbox', value: false, title: 'Just a checkbox', required: true\n\n\t\t\t\t},\n\n\n\n\t\t\t\t]},\n\n\t\t\t\t\t\t//end con1\n\n\n\t\t\t\t\t\t//start con 2\n\n\t\t\t\t\t\t{ id:77,title:'num two', position: 2, inputs: [{id:95, type:'checkbox', text:'subby checkbox', value: null, required: true}]  },\n\n\t\t\t\t\t\t//start con 3\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tid: 2,\n\t\t\t\t\t\t\ttitle: 'Rate the condition',\n\t\t\t\t\t\t\tposition: 3,\n\t\t\t\t\t\t\tconditions: { \n\n\t\t\t\t\t\t\t\ttarget_input_conditions: \n\t\t\t\t\t\t\t\t\t\t//check rules types: all_and_only, all_or_more, atleast_n \n\t\t\t\t\t\t\t\t\t\t[ \n\t\t\t\t\t\t\t\t\t\t\t{ input_type: 'multiselect', input_id: 4, input_value_check_rule: 'all_and_only', test_array: [4,8,7], behavior: 'hide', container_id: 1, section_id: 0, uid: UUID.generate() },\n\t\t\t\t\t\t\t\t\t\t\t{ input_type: 'radiogroup',input_id: 0,input_value_check_rule: 'equals', test_value: 1, behavior: 'disable', container_id: 1, section_id: 0, uid: UUID.generate() },\n\t\t\t\t\t\t\t\t\t\t\t{ input_type: 'checkbox',input_id: 55,input_value_check_rule: 'equals', test_value: true, behavior: 'disable', container_id: 1, section_id: 0, uid: UUID.generate()},\n\n\n\t\t\t\t\t\t\t\t\t\t],\n\n\t\t\t\t\t\t\t\t\t\tinput_check_rule: '>=2'\n\t\t\t\t\t\t\t\t\t},\n\n\n\n\t\t\t\t\t\t\t\t  //container position,option position within container, operator, option_value_id, behavior, container_id\n\t\t\t\t\t\t// condition:'multiselect_4,>==,4|8|7,show,1;radiogroup_0,=,1,disable,1;checkbox_5,=,true,disable,1~>=2',\n\t\t\t\t\t\tinputs:[\n\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tid:2, type:'select', text:'select an option',  group: null, value: null, required: true,\n\t\t\t\t\t\t\toptions: [{id:2, text:'poor', value: 2 }, {id:3, text:'good', value: 3}]\n\t\t\t\t\t\t},\n\n\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tid:3, type:'text', text:'select an option',  group: null, value: null, placeholder:'put more text here', required: true\n\t\t\t\t\t\t}\n\t\t\t\t\t\t]\n\t\t\t\t\t}]\n\t\t\t\t},\n\t\t\t\t//section 1 end\n\n\t\t\t\t//section 2 start\n\n\n\t\t\t\t{\n\n\t\t\t\t\tid:1,\n\t\t\t\t\ttitle:'Section Two',\n\t\t\t\t\tcount: 2,\n\t\t\t\t\tcontainers: [{\n\t\t\t\t\t\tid: 3,\n\t\t\t\t\t\tposition: 1,\n\n\n\n\n\n\t\t\t\t\t}]\n\n\t\t\t\t}]\n\n\t\t\t}\n"],"sourceRoot":"/source/"}